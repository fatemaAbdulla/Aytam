
@using Aytam.Data
@using BlazorDateRangePicker
@using System.Globalization
@inject ApplicationDbContext _db


<EditForm Model="@parent" OnValidSubmit="@OnValidSubmit">
    <div class="modal-body">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label for="FirstName">First Name:</label><br />
            <InputText @bind-Value="@parent.FirstName" type="text" class="form-control" id="FirstName" /><br />
        </div>
        <div class="form-group">
            <label for="MiddleNames">Middle Names:</label><br />
            <InputText @bind-Value="@parent.MiddleNames" type="text" class="form-control" id="MiddleNames" /><br />
        </div>
        <div class="form-group">
            <label for="LastName">Last Name:</label><br />
            <InputText @bind-Value="@parent.LastName" type="text" class="form-control" id="LastName" /><br />
        </div>
        <div class="form-group">
            <label for="CPR">CPR:</label><br />
            <InputText @bind-Value="@parent.CPR" type="text" class="form-control" id="CPR" /><br />
        </div>
        <div class="form-group">
            <label for="Gender">Gender:</label><br />
                                               <InputSelect @bind-Value="@parent.Gender" class ="form-control">
                                                   @foreach (var gender in Enum.GetValues(typeof(Gender)))
                                                   {
                                                       <option value="@gender">@gender.ToString()</option>
                                                   }
                                               </InputSelect>
        </div>
        <div class="form-group">
            <label for="MaritalStatus">Marital Status:</label><br />
            <InputSelect @bind-Value="@parent.MaritalStatus" class="form-control">
                @foreach (MaritalStatus status in Enum.GetValues(typeof(MaritalStatus)))
                {
                    <option value="@status">@status.ToString()</option>
                }
            </InputSelect>
        </div>

        <div class="form-group">
            <label for="DOB">Date Of Birth:</label><br />
            <DateRangePicker SingleDatePicker="true" @bind-StartDate="SelectedDate" Culture="Culture" />

        </div>
        <div class="form-group">
            <label for="Notes">Notes:</label><br />

            <InputTextArea @bind-Value="@parent.Notes" type="text" class="form-control" id="Notes" /><br />
        </div>





        <AlertMessage Message="@_ErrorMessage" AlertType="@AlertType.Danger"></AlertMessage>


    </div>
    <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="Close">Close</button>
        <button type="submit" class="btn btn-success">@ButtonText</button>

    </div>
</EditForm>

@code {

    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; }

    [Parameter]
    public Parent parent { get; set; }
    [Parameter]
    public EventCallback<Parent> OnParentAdded { get; set; }
    [Parameter]
    public EventCallback<Parent> OnParentUpdated { get; set; }
    private string ButtonText = "Add Parent";
    private bool EditMode = false;
    private string _ErrorMessage;
    public string SelectedGenderValue
    {
        get { return ((int)parent.Gender).ToString(); }
        set { parent.Gender = (Gender)int.Parse(value); }
    }
    public DateTimeOffset? SelectedDate
    {
        get { return new DateTimeOffset(parent.DOB); }
        set
        {
            parent.DOB = value.GetValueOrDefault().Date;
        }
    }
    private CultureInfo Culture = new CultureInfo("en-GB");


    private async Task Close()
    {
        //await OnParentAdded.InvokeAsync(null);
        await BlazoredModal.Cancel();
    }

    private async Task OnValidSubmit(EditContext editContext)
    {
        try
        {
            if (!EditMode)
            {
                await _db.Parents.AddAsync(parent);
            }


            await _db.SaveChangesAsync();
            await BlazoredModal.Close(ModalResult.Ok<Parent>(parent));



        }
        catch (Exception ex)
        {
            _ErrorMessage = ex.Message;

        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (parent != null)
        {
            EditMode = true;
            ButtonText = "Save Changes";
            _db.Attach(parent);
        }
        else
        {
            parent = new Parent();
        }

    }



}
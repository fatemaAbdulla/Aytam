@using Aytam.Data
@using BlazorDateRangePicker
@using System.Globalization
@using Blazored.Typeahead
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext _db



@if (Show)
{
    <AddParent Show="_Show" OnParentAdded="AddParentToList" parent="null"></AddParent>

    <div class="modal fade show" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true" style="display:block">
        <div class="modal-dialog modal-dialog-scrollable">
            <div class="modal-content" style="overflow-y:auto">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Add Orphan</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <EditForm Model="@Orphan" OnValidSubmit="@OnValidSubmit">
                    <div class="modal-body">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="form-group">
                            <label for="FirstName">First Name:</label><br />
                            <InputText @bind-Value="@Orphan.FirstName" type="text" class="form-control" id="FirstName" /><br />
                        </div>
                        <div class="form-group">
                            <label for="MiddleNames">Middle Names:</label><br />
                            <InputText @bind-Value="@Orphan.MiddleNames" type="text" class="form-control" id="MiddleNames" /><br />
                        </div>
                        <div class="form-group">
                            <label for="LastName">Last Name:</label><br />
                            <InputText @bind-Value="@Orphan.LastName" type="text" class="form-control" id="LastName" /><br />
                        </div>
                        <div class="form-group">
                            <label for="CPR">CPR:</label><br />
                            <InputText @bind-Value="@Orphan.CPR" type="text" class="form-control" id="CPR" /><br />
                        </div>
                        <div class="form-group">
                            <label for="Gender">Gender:</label><br />
                            <InputSelect @bind-Value="@Orphan.Gender">
                                <option value="0">Select</option>
                                <option value="1">Male</option>
                                <option value="2">Female</option>
                            </InputSelect>
                        </div>

                        <div class="form-group">
                            <label for="DOB">Date Of Birth:</label><br />
                            <DateRangePicker SingleDatePicker="true" @bind-StartDate="SelectedDate" Culture="Culture" />

                        </div>
                        <div class="form-group">
                            <label for="Notes">Notes:</label><br />

                            <InputTextArea @bind-Value="@Orphan.Notes" type="text" class="form-control" id="Notes" /><br />
                        </div>

                        <div class="form-group">
                            <label>Father:</label><br />
                            <BlazoredTypeahead SearchMethod="SearchFather"
                                               @bind-Value="@Orphan.Father">
                                <SelectedTemplate Context="Parent">
                                    @Parent.FullName
                                </SelectedTemplate>
                                <ResultTemplate Context="Parent">
                                    @Parent.FullName
                                </ResultTemplate>
                                <FooterTemplate>
                                    <button class="btn btn-secondary" @onclick="() => { _Show = true; }">Add New Parent</button>
                                </FooterTemplate>
                            </BlazoredTypeahead>

                        </div>

                       


                        <AlertMessage Message="@_ErrorMessage" AlertType="@AlertType.Danger"></AlertMessage>


                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="Close">Close</button>
                        <button type="submit" class="btn btn-success">@ButtonText</button>

                    </div>
                </EditForm>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>

}

@code {

    [Parameter]
    public Orphan Orphan { get; set; } = new Orphan();

    [Parameter]
    public bool Show { get; set; }

    [Parameter]
    public EventCallback<Orphan> OnOrphanAdded { get; set; }

    [Parameter]
    public EventCallback<Orphan> OnOrphanUpdated { get; set; }

    private bool _Show = false;

    private string ButtonText = "Add Orphan";

    private bool EditMode = false;

    private void AddParentToList(Parent parent)
    {
        _Show = false;
        if (parent != null)
        {
            
        }

    }

    private async Task<IEnumerable<Parent>> SearchFather(string searchText)
    {
       var results = await _db.Parents
            .Where(p => p.Gender == Gender.Male || p.Gender == Gender.NotSpecified)
            .ToListAsync();

        return results
            .Where(p => p.FullName.Contains(searchText));
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Orphan != null)
        {
            EditMode = true;
            ButtonText = "Save Changes";
            _db.Attach(Orphan);
        }
        else
        {
            Orphan = new Orphan();
        }

    }


    private string _ErrorMessage;
    public string SelectedGenderValue
    {
        get { return ((int)Orphan.Gender).ToString(); }
        set { Orphan.Gender = (Gender)int.Parse(value); }
    }
    public DateTimeOffset? SelectedDate
    {
        get { return new DateTimeOffset(Orphan.DOB); }
        set
        {
            Orphan.DOB = value.GetValueOrDefault().Date;
        }
    }

    private CultureInfo Culture = new CultureInfo("en-GB");


    private async Task Close()
    {
        await OnOrphanAdded.InvokeAsync(null);

    }

    private async Task OnValidSubmit(EditContext editContext)
    {
        try
        {

            if (EditMode)
            {
                await OnOrphanUpdated.InvokeAsync(Orphan);
            }
            else
            {
                await _db.Orphans.AddAsync(Orphan);
                await OnOrphanAdded.InvokeAsync(Orphan);
            }


            await _db.SaveChangesAsync();



        }
        catch (Exception ex)
        {
            _ErrorMessage = ex.Message;
        }
    }

}

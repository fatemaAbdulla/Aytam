
@page "/sponsors"
@using Aytam.Data
@using Aytam.Components
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext _db
@inject IModalService Modal

<h1>Sponsors</h1>


@if (_SponsorsList == null)
{
    <p>
        <em>Loading...</em>
    </p>

}
else
{

    <AlertMessage Message="@_Message" AlertType="@_AlertType"></AlertMessage>

    <button @onclick="() => { ShowSponsorDetails(null); }" class="btn btn-outline-dark">Add Sponsor</button>


    <table class="table">
        <thead>
            <tr>
                <th scope="col">Name</th>
                <th scope="col">CPR</th>
                <th scope="col">Gender</th>
                <th scope="col">Age</th>

            </tr>
        </thead>

        <tbody>
            @foreach (var item in _SponsorsList)
            {
                <tr>
                    <td>@item.FullName</td>
                    <td>@item.CPR</td>
                    <td>@item.Gender</td>
                    <td>@item.Age</td>
                    <td>
                        <button type="button" class="btn btn-outline-danger" @onclick="async () => { await DeleteSponsor(item.ID); }">
                            <span class="oi oi-trash" aria-hidden="true"></span>
                        </button> &nbsp; &nbsp;
                        <button type="button" class="btn btn-outline-dark" @onclick="() => { ShowSponsorDetails(item); }"><span class="oi oi-pencil" aria-hidden="true"></span></button>
                    </td>

                </tr>
            }

        </tbody>


    </table>
}




@code {


    private List<Sponsor> _SponsorsList;
    private string _Message = "";
    private AlertType _AlertType = AlertType.Secondary;



    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _SponsorsList = await _db.Sponsors.ToListAsync();
            StateHasChanged();
        }

    }

    private async Task DeleteSponsor(int ID)
    {
        try
        {
            Sponsor _Sponsor = await _db.Sponsors.FindAsync(ID);
            _db.Sponsors.Remove(_Sponsor);
            await _db.SaveChangesAsync();

            _SponsorsList.Remove(_Sponsor);
            _Message = "Deleted Successfully";
            _AlertType = AlertType.Success;
        }
        catch (Exception ex)
        {
            _Message = ex.Message;
            _AlertType = AlertType.Danger;
        }
    }


    private void AddSponsorToList(Sponsor sponsor)
    {
        if (sponsor != null)
        {
            _SponsorsList.Add(sponsor);
        }


    }

    private void UpdateSponsorInList(Sponsor sponsor)
    {

        int SponsorToRemove = _SponsorsList.FindIndex(s => s.ID == sponsor.ID);
        _SponsorsList.RemoveAt(SponsorToRemove);
        _SponsorsList.Insert(SponsorToRemove, sponsor);




    }

    private async void ShowSponsorDetails(Sponsor sponsor)
    {

        var Params = new ModalParameters();
        Params.Add(nameof(Sponsor), sponsor);
        var Options = new ModalOptions { ContentScrollable = true };
        var mymodal= Modal.Show<SponsorDetails>("Add Sponsor", Params, Options);
        var result = await mymodal.Result;

        if (!result.Cancelled)
        {
            if (sponsor == null)
            {
                AddSponsorToList((Sponsor)result.Data);
            }
            else
            {
                UpdateSponsorInList((Sponsor)result.Data);
            }
            StateHasChanged();
        }

    }


}
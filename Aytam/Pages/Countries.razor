@page "/countries"
@using Aytam.Data
@using Aytam.Components
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext _db
<h1>Countries</h1>

<AddCountry Show="@_Show" OnCountryAdded="AddCountryToList">Add Country</AddCountry>


<button type="button" class="btn btn-primary" @onclick="ShowAddCountry"></button>

@if (CountriesList == null)
{
    <p>
        <em>Loading...</em>
    </p>

}
else
{

    <AlertMessage Message="@_Message" AlertType="@_AlertType"></AlertMessage>
    <EditCountry Country="@CountryToEdit" OnCountryUpdated="UpdateCountry"></EditCountry>

    <table class="table">
        <thead>
            <tr>
                <th scope="col">Country Code</th>
                <th scope="col">Country Name</th>
                <th scope="col"></th>
            </tr>
        </thead>

        <tbody>
            @foreach (var item in CountriesList)
            {
                <tr>
                    <td>@item.CountryCode</td>
                    <td>@item.CountryName</td>
                    <td>
                        <button type="button" class="btn btn-outline-danger" @onclick="async () => { await DeleteCountry(item.CountryCode); }">
                            <span class="oi oi-trash" aria-hidden="true"></span>
                        </button> &nbsp; &nbsp;
                        <button type="button" class="btn btn-outline-dark" @onclick="() => { EditCountry(item); }"><span class="oi oi-pencil" aria-hidden="true"></span></button>
                    </td>

                </tr>
            }

        </tbody>


    </table>
}


@code {
    private List<Country> CountriesList;
    private string _Message = "";
    private AlertType _AlertType = AlertType.Secondary;
    private Country CountryToEdit = null;
    private bool _Show = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            CountriesList = await _db.Countries.ToListAsync();
            StateHasChanged();
        }

    }


    private void ShowAddCountry()
    {
        _Show = true;
    }


    private async Task DeleteCountry(string cc)
    {
        try
        {
            Country country = await _db.Countries.FindAsync(cc);
            _db.Countries.Remove(country);
            await _db.SaveChangesAsync();
            CountriesList.Remove(country);
            _Message = "Deleted Successfully";
            _AlertType = AlertType.Success;

        }
        catch (Exception ex)
        {
            _Message = ex.Message;
            _AlertType = AlertType.Danger;
        }

    }
    private void AddCountryToList(Country country)
    {
        _Show = false;
        if (country != null)
        {
            CountriesList.Add(country);
        }

    }

    private void EditCountry(Country country)
    {
        CountryToEdit = country;
    }

    private void UpdateCountry(Country newCountry)
    {
        CountryToEdit = null;
        int i = CountriesList.FindIndex(c => c.CountryCode == newCountry.CountryCode);
        CountriesList.RemoveAt(i);
        CountriesList.Insert(i, newCountry);

    }

}


@page "/parents"
@using Aytam.Data
@using Aytam.Components
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext _db


<h1>Parents</h1>


@if (_ParentsList == null)
{
    <p>
        <em>Loading...</em>
    </p>

}
else
{

    <AlertMessage Message="@_Message" AlertType="@_AlertType"></AlertMessage>

    @*<AddParent Show="_Show"></AddParent>*@
    <button @onclick="() => { _Show = true; }">Add Parent</button>

    <table class="table">
        <thead>
            <tr>
                <th scope="col">Name</th>
                <th scope="col">CPR</th>
                <th scope="col">Gender</th>
                <th scope="col">Age</th>

            </tr>
        </thead>

        <tbody>
            @foreach (var item in _ParentsList)
            {
                <tr>
                    <td>@item.FullName</td>
                    <td>@item.CPR</td>
                    <td>@item.Gender</td>
                    <td>@item.Age</td>
                    <td>
                        <button type="button" class="btn btn-outline-danger" @onclick="async () => { await DeleteParent(item.ID); }">
                            <span class="oi oi-trash" aria-hidden="true"></span>
                        </button> &nbsp; &nbsp;
                        <button type="button" class="btn btn-outline-dark" @onclick="() => { EditParent(item); }"><span class="oi oi-pencil" aria-hidden="true"></span></button>
                    </td>

                </tr>
            }

        </tbody>


    </table>
}




@code {


    private List<Parent> _ParentsList;
    private string _Message = "";
    private AlertType _AlertType = AlertType.Secondary;
    private Parent ParentToEdit = null;
    private bool _Show = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _ParentsList = await _db.Parents.ToListAsync();
            StateHasChanged();
        }

    }

    private async Task DeleteParent(int ID)
    {
        try
        {
            Parent _Parent = await _db.Parents.FindAsync(ID);
            _db.Parents.Remove(_Parent);
            await _db.SaveChangesAsync();

            _ParentsList.Remove(_Parent);
            _Message = "Deleted Successfully";
            _AlertType = AlertType.Success;
        }
        catch (Exception ex)
        {
            _Message = ex.Message;
            _AlertType = AlertType.Danger;
        }
    }

    private void EditParent(Parent parent)
    {
        ParentToEdit = parent;

    }


}